// <auto-generated />
using System;
using BookManager.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookManager.WebAPI.Migrations
{
    [DbContext(typeof(BookManagerContext))]
    partial class BookManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BookManager.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matheus"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Marcos"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lucas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "João"
                        });
                });

            modelBuilder.Entity("BookManager.Domain.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("BuyLink");

                    b.Property<string>("Description");

                    b.Property<int>("GenreId");

                    b.Property<string>("ImageUrl");

                    b.Property<int>("Pages");

                    b.Property<DateTime>("PublishDate");

                    b.Property<int>("PublishingCompanyId");

                    b.Property<string>("Synopsis");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublishingCompanyId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookManager.Domain.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Épico"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fábula"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Epopeia"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Novela"
                        });
                });

            modelBuilder.Entity("BookManager.Domain.Models.PublishingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PublishingCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Simon & Schuster	EUA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Egmont group	Dinamarca / Noruega "
                        },
                        new
                        {
                            Id = 3,
                            Name = "Woongjin ThinkBig	Coréia do Sul"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RCS Libri	Itália	513	6063"
                        });
                });

            modelBuilder.Entity("BookManager.Domain.Models.Book", b =>
                {
                    b.HasOne("BookManager.Domain.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookManager.Domain.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookManager.Domain.Models.PublishingCompany", "PublishingCompany")
                        .WithMany()
                        .HasForeignKey("PublishingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
